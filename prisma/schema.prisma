generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // Uses connection pooling
  url       = env("POSTGRES_PRISMA_URL")
  // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
  // or you'll have dangling databases from migrations
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Category {
  id        Int        @id @default(autoincrement())
  name      String
  parentId  Int?
  sortOrder Int?       @default(1)
  isActive  Boolean
  createdAt DateTime   @default(now()) @db.Timestamp(6)
  updatedAt DateTime?
  parent    Category?  @relation("parent", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  children  Category[] @relation("parent")
  Product   Product[]
}

model Product {
  id             Int             @id @default(autoincrement())
  name           String
  price          Float           @default(0.0)
  description    String?
  isAvailable    Boolean         @default(true)
  isActive       Boolean         @default(true)
  isFeatured     Boolean         @default(false)
  saleValue      Int?
  categoryId     Int?
  specPresetId   Int
  productGroupId Int?
  category       Category?       @relation(fields: [categoryId], references: [id])
  images         ProductImage[]
  reviews        ProductReview[]
  specValues     SpecValue[]
  specPreset     SpecPreset      @relation(fields: [specPresetId], references: [id])
  cartItems      CartItem[]
  orderItems     OrderItem[]
  productGroup   ProductGroup?   @relation(fields: [productGroupId], references: [id], onDelete: SetNull)
  rating         Float?          @default(0.0)
}

model ProductGroup {
  id       Int                @id @default(autoincrement())
  name     String             @unique
  products Product[]
  specs    ProductGroupSpec[]
}

model ProductGroupSpec {
  productGroupId Int
  specId         Int

  productGroup ProductGroup @relation(fields: [productGroupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  spec         Spec         @relation(fields: [specId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([productGroupId, specId])
}

enum ReviewStatus {
  new
  pending
  proofed
}

model ProductReview {
  id        Int          @id @default(autoincrement())
  text      String
  score     Int
  status    ReviewStatus @default(new)
  userId    Int
  createdAt DateTime     @default(now()) @db.Timestamp(6)
  productId Int
  product   Product      @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Spec {
  id                Int                   @id @default(autoincrement())
  name              String                @unique()
  values            SpecPresetGroupItem[]
  ProductGroupSpecs ProductGroupSpec[]
}

model SpecPreset {
  id           Int               @id @default(autoincrement())
  name         String            @unique()
  presetGroups SpecPresetGroup[]
  products     Product[]
}

model SpecPresetGroup {
  id               Int                   @id @default(autoincrement())
  name             String                @unique()
  presetId         Int
  preset           SpecPreset            @relation(fields: [presetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sortOrder        Int                   @default(1)
  presetGroupItems SpecPresetGroupItem[]
}

model SpecPresetGroupItem {
  id            Int             @id @default(autoincrement())
  presetGroupId Int
  specId        Int
  sortOrder     Int             @default(1)
  presetGroup   SpecPresetGroup @relation(fields: [presetGroupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  values        SpecValue[]
  spec          Spec            @relation(fields: [specId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model SpecValue {
  id                    Int                 @id @default(autoincrement())
  productId             Int
  specPresetGroupItemId Int
  value                 String
  product               Product             @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  presetGroupItem       SpecPresetGroupItem @relation(fields: [specPresetGroupItemId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([productId, specPresetGroupItemId], map: "productId_specPresetGroupItemId_unique_constraint")
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  publicId  String
  sortOrder Int     @default(1)
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum UserRole {
  SuperAdmin
  Admin
  Customer
}

model User {
  id        Int           @id @default(autoincrement())
  name      String?
  email     String        @unique
  password  String
  role      UserRole
  addresses UserAddress[]
  orders    Order[]
}

model UserAddress {
  id          Int     @id @default(autoincrement())
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      Int
  firstName   String
  lastName    String
  postalCode  String
  street      String
  houseNumber String
  city        String
  orders      Order[]

  @@unique([id, userId], map: "id_userId")
}

model ResetToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String
  createdAt DateTime @default(now()) @db.Timestamp(6)
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model CartItem {
  id        Int      @id @default(autoincrement())
  productId Int
  qty       Int
  userId    Int?
  sessionId String?
  updatedAt DateTime @default(now()) @db.Timestamp(6)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([productId, userId], map: "productId_userId")
  @@unique([productId, sessionId], map: "productId_sessionId")
}

enum OrderPaymentType {
  Cash
  Card
  Crypto
}

enum OrderStatus {
  pending
  accepted
  cancelled
  completed
}

model Order {
  id                Int              @id @default(autoincrement())
  createdAt         DateTime         @default(now()) @db.Timestamp(6)
  deliveryAddressId Int
  deliveryAddress   UserAddress      @relation(fields: [deliveryAddressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  phoneNumber       String
  email             String
  userId            Int
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  paymentType       OrderPaymentType @default(Card)
  orderStatus       OrderStatus      @default(pending)
  orderItems        OrderItem[]
}

model OrderItem {
  id          Int     @id @default(autoincrement())
  productId   Int
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productName String
  qty         Int
  price       Float
  orderId     Int
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
